import java.util.Arrays;
public class Binary {
    
    int size = 64;
    int[] intArray = new int[size/32];
    
    public boolean getByIndex(int index) {
        int elementIndex = index/32;
        int bitIndex = index % 32;
        int element = intArray[elementIndex];
        int mask = 1 << bitIndex;
        return (element & mask) == mask;
    }
    public void inversion(int index) {
        int elementIndex = index/32;
        int bitIndex = index % 32;
        int element = intArray[elementIndex];
        int mask = 1 << bitIndex;
        intArray[elementIndex] = element ^ mask;
    }
    
    public void setTrue(int index){
        int elementIndex = index/32;
        int bitIndex = index % 32;
        int element = intArray[elementIndex];
        int mask = 1 << bitIndex;
        intArray[elementIndex] = element | mask;
    }
    
    public void con(int index){
        int elementIndex = index/32;
        int bitIndex = index % 32;
        int element = intArray[elementIndex];
        int mask = 1 << bitIndex;
        mask = ~mask;
        intArray[elementIndex] = element & mask;
    }

    @Override
    public String toString() {
        String[] result = new String[size];
        for(int i = 0; i <result.length; i++) {
            if(getByIndex(i)) result[i] = "1";
            else result[i] = "0";
        }
        return Arrays.toString(result); 
    }
    
    
    
}
